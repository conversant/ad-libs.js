# AdLibs

[![Build Status](https://travis-ci.org/conversant/ad-libs.js.svg?branch=master)](https://travis-ci.org/conversant/ad-libs.js) [![Coverage Status](https://coveralls.io/repos/github/conversant/ad-libs.js/badge.svg)](https://coveralls.io/github/conversant/ad-libs.js) [![Code Climate](https://codeclimate.com/github/conversant/ad-libs.js/badges/gpa.svg)](https://codeclimate.com/github/conversant/ad-libs.js) [![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/conversant/ad-libs.js.svg)](http://isitmaintained.com/project/conversant/ad-libs.js "Average time to resolve an issue") [![Percentage of issues still open](http://isitmaintained.com/badge/open/conversant/ad-libs.js.svg)](http://isitmaintained.com/project/conversant/ad-libs.js "Percentage of issues still open") [![Dependency Status](https://david-dm.org/conversant/ad-libs.js.svg?style=flat-square)](https://david-dm.org/conversant/ad-libs.js)

| ________________ | The gist of it... |
|:---|:---|
| ![adlibs](https://github.com/conversant/ad-libs.js/raw/master/doc/Ad-libs-js.png "Adlibs") | A collection of cross-browser methods for use with front-end development. adlibs is a tool that supports various browser and OS combinations dating back to IE9. It uses feature detection to determine the user's environment and outputs details pertaining to that OS and browser. adlibs also allows developers to safely execute front end methods such as domReady and XMLHttpRequests across all browsers. |

## Installation
```bash
npm install adlibs
```
## Usage

Each function is exported as a single commonjs module, allowing only the needed modules to be
bundled into a project to keep minified bundles as small as possible.

In Node.js:
```js
// Load the full adlibs build.
var adlibs = require('adlibs');

// Load a single module for smaller builds with webpack.
var domReady = require('adlibs/lib/dom/domReady');
var browser = require('adlibs/lib/detect/browser');
```

## Detection Modules

There are several modules that use feature detection to determine the user's environment. In order to populate the resulting
objects, the detect function must be executed.

For example, in order to populate the browser object:
```js
var browser = require('adlibs/lib/detect/browser').detect();

// outputs the name of the os
console.log(browser.os.name)
```

# API Reference

{{optionSet "example-lang" "js" ~}}
{{>main}}

# adlibs Developers
* [j-brown](https://github.com/j-brown)
* [msahagu2](https://github.com/msahagu2)
* [ericperez](https://github.com/ericperez)
* [gblosser](https://github.com/gblosser42)
* [jeffreytgilbert](https://github.com/jeffreytgilbert)
* [ggustilo](https://github.com/ggustilo)
* [larrymyers](https://github.com/larrymyers)


* * *
